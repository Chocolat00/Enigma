package application;

public class Rotor {
	private int[][] connections;
	private int[][] backward;
	
	private int position = 0;
	private int rotorNumber;
	
	public Rotor (int n) {
		rotorNumber = n;
		
		switch(rotorNumber) {
	    // 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
	    // A B C D E F G H I J  K  L  M  N  O  P  Q  R  S  T  U  V  W  X  Y  Z
		
		// connections reprezentuj¹ uk³ad kabli w wirniku
		
	    case 0:
	    	connections = new int[][] {{0,4}, {1,10}, {2,12}, {3,5}, {4,11}, {5,6}, {6,3}, {7,16}, {8,21}, {9,25}, {10,13}, {11,19}, {12,14}, {13,22}, {14,24}, {15,7}, {16,23}, {17,20}, {18,18}, {19,15}, {20,0}, {21,8}, {22,1}, {23,17}, {24,2}, {25,9}};
	    	backward = new int[][] {{0,20}, {1,22}, {2,24}, {3,6}, {4,0}, {5,3}, {6,5}, {7,15}, {8,21}, {9,25}, {10,1}, {11,4}, {12,2}, {13,10}, {14,12}, {15,19}, {16,7}, {17,23}, {18,18}, {19,11}, {20,17}, {21,8}, {22,13}, {23,16}, {24,14}, {25,9}};
	    	break;
	    case 1:
	    	connections = new int[][] {{0,0}, {1,9}, {2,3}, {3,10}, {4,18}, {5,8}, {6,17}, {7,20}, {8,23}, {9,1}, {10,11}, {11,7}, {12,22}, {13,19}, {14,12}, {15,2}, {16,16}, {17,6}, {18,25}, {19,13}, {20,15}, {21,24}, {22,5}, {23,21}, {24,14}, {25,4}}; 
	    	backward = new int[][] {{0,0}, {1,9}, {2,15}, {3,2}, {4,25}, {5,22}, {6,17}, {7,11}, {8,5}, {9,1}, {10,3}, {11,10}, {12,14}, {13,19}, {14,24}, {15,20}, {16,16}, {17,6}, {18,4}, {19,13}, {20,7}, {21,23}, {22,12}, {23,8}, {24,21}, {25,18}};
	    	break;
	    case 2:
	    	connections = new int[][] {{0,1}, {1,3}, {2,5}, {3,7}, {4,9}, {5,11}, {6,2}, {7,15}, {8,17}, {9,19}, {10,23}, {11,21}, {12,25}, {13,13}, {14,24}, {15,4}, {16,8}, {17,22}, {18,6}, {19,0}, {20,10}, {21,12}, {22,20}, {23,18}, {24,16}, {25,14}}; 
	    	backward = new int[][] {{0,19}, {1,0}, {2,6}, {3,1}, {4,15}, {5,2}, {6,18}, {7,3}, {8,16}, {9,4}, {10,20}, {11,5}, {12,21}, {13,13}, {14,25}, {15,7}, {16,24}, {17,8}, {18,23}, {19,9}, {20,22}, {21,11}, {22,17}, {23,10}, {24,14}, {25,12}}; 
	    	break;
	    case 3:
	    	connections = new int[][] {{0,4}, {1,18}, {2,14}, {3,21}, {4,15}, {5,25}, {6,9}, {7,0}, {8,24}, {9,16}, {10,20}, {11,8}, {12,17}, {13,7}, {14,23}, {15,11}, {16,13}, {17,5}, {18,19}, {19,6}, {20,10}, {21,3}, {22,2}, {23,12}, {24,22}, {25,1}}; 
	    	backward = new int[][] {{0,}, {1,}, {2,}, {3,}, {4,}, {5,}, {6,}, {7,}, {8,}, {9,}, {10,}, {11,}, {12,}, {13,}, {14,}, {15,}, {16,}, {17,}, {18,}, {19,}, {20,}, {21,}, {22,}, {23,}, {24,}, {25,}};
	    	break;
	    case 4:
	    	connections = new int[][] {{0,21}, {1,25}, {2,1}, {3,17}, {4,6}, {5,8}, {6,19}, {7,24}, {8,20}, {9,15}, {10,18}, {11,3}, {12,13}, {13,7}, {14,11}, {15,23}, {16,0}, {17,22}, {18,12}, {19,9}, {20,16}, {21,14}, {22,5}, {23,4}, {24,2}, {25,10}}; 
	    	backward = new int[][] {{0,}, {1,}, {2,}, {3,}, {4,}, {5,}, {6,}, {7,}, {8,}, {9,}, {10,}, {11,}, {12,}, {13,}, {14,}, {15,}, {16,}, {17,}, {18,}, {19,}, {20,}, {21,}, {22,}, {23,}, {24,}, {25,}};
	    	break;
	    }
	}
	
	void setRotorPosition (int pos) {
		position = pos;
	}
	
	int getRotorPosition () {
		return position;
	}
	
	int returnValueForward (int in) {
		in = (in+position) % 26;
		return connections[in][1];
	}
	
	int returnValueBackward (int in) {
		in = (in+position) % 26;
		return backward[in][1];
	}

}
